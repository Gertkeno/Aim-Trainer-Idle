[gd_resource type="VisualShader" load_steps=9 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "Color"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "Normal"
texture_type = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=3]
uniform_name = "RMAo"
color_default = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]
output_port_for_preview = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=5]
uniform_name = "Tiling"

[sub_resource type="VisualShaderNodeVectorOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=7]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorFunc" id=8]
output_port_for_preview = 0
function = 20

[resource]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform float Tiling;
uniform sampler2D Color : hint_albedo;
uniform sampler2D RMAo : hint_black;
uniform sampler2D Normal : hint_normal;



void vertex() {
// Output:0

}

void fragment() {
// Input:8
	vec3 n_out8p0 = vec3(UV, 0.0);

// ScalarUniform:6
	float n_out6p0 = Tiling;

// VectorOp:7
	vec3 n_out7p0 = n_out8p0 * vec3(n_out6p0);

// VectorFunc:9
	vec3 n_out9p0 = fract(n_out7p0);

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(Color, n_out9p0.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// TextureUniform:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 n_tex_read = texture(RMAo, n_out9p0.xy);
		n_out4p0 = n_tex_read.rgb;
		n_out4p1 = n_tex_read.a;
	}

// VectorDecompose:5
	float n_out5p0 = n_out4p0.x;
	float n_out5p1 = n_out4p0.y;
	float n_out5p2 = n_out4p0.z;

// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(Normal, n_out9p0.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// Output:0
	ALBEDO = n_out2p0;
	ROUGHNESS = n_out5p0;
	AO = n_out5p2;
	NORMALMAP = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -517.036, 77.6517 )
modes/cull = 2
nodes/fragment/0/position = Vector2( 400, 20 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -20, 20 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 80, 340 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -20, 160 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 140, 120 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -720, 240 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -480, 140 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -680, 100 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( -279.75, 106.25 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 0, 8, 5, 2, 0, 6, 8, 0, 7, 0, 7, 0, 9, 0, 9, 0, 2, 0, 9, 0, 4, 0, 9, 0, 3, 0, 6, 0, 7, 1, 4, 0, 5, 0, 5, 0, 0, 3 )
